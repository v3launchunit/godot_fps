[gd_resource type="ShaderMaterial" load_steps=6 format=3 uid="uid://c7ql8cqycstn4"]

[ext_resource type="Texture2D" uid="uid://y13cqhpsywi6" path="res://textures/terrain/custom_hand/key_metal/key_metal_normals.png" id="1_yt2hn"]

[sub_resource type="Shader" id="Shader_2ddxh"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.2.1.stable.mono's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_nearest_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_nearest_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_nearest_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
uniform sampler2D texture_emission : source_color, hint_default_black,filter_nearest_mipmap,repeat_enable;
uniform vec4 emission : source_color;
uniform float emission_energy;
uniform sampler2D texture_normal : hint_roughness_normal,filter_nearest_mipmap,repeat_enable;
uniform float normal_scale : hint_range(-16,16);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

#include \"res://shaders/includes/psx_inc.gdshaderinc\"

void vertex() {
	UV = UV * vec2(0.0078125, 0.0078125) + uv1_offset.xy;
	POSITION = map_affine(snap_vertex(PROJECTION_MATRIX * MODELVIEW_MATRIX * vec4(VERTEX, 1.0)));
}

void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	NORMAL_MAP = texture(texture_normal,base_uv).rgb;
	NORMAL_MAP_DEPTH = normal_scale;
	vec3 emission_tex = texture(texture_emission,base_uv).rgb;
	EMISSION = (emission.rgb+emission_tex)*emission_energy;
}
"

[sub_resource type="Gradient" id="Gradient_5pufk"]
colors = PackedColorArray(0, 0, 0, 1, 0.25, 0.25, 0.25, 1)

[sub_resource type="FastNoiseLite" id="FastNoiseLite_hbfgv"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_ssase"]
width = 128
height = 128
seamless = true
seamless_blend_skirt = 0.5
bump_strength = 2.0
color_ramp = SubResource("Gradient_5pufk")
noise = SubResource("FastNoiseLite_hbfgv")

[resource]
render_priority = 0
shader = SubResource("Shader_2ddxh")
shader_parameter/albedo = Color(0, 1, 0, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/specular = 0.5
shader_parameter/metallic = 1.0
shader_parameter/emission = Color(0, 0.12549, 0, 1)
shader_parameter/emission_energy = 1.0
shader_parameter/normal_scale = 1.0
shader_parameter/uv1_scale = Vector3(0.0078125, 0.0078125, 0.0078125)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/texture_roughness = SubResource("NoiseTexture2D_ssase")
shader_parameter/texture_normal = ExtResource("1_yt2hn")
