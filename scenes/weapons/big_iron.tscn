[gd_scene load_steps=37 format=3 uid="uid://bfxuay7qxu7lj"]

[ext_resource type="ArrayMesh" uid="uid://vfuqffuqwocv" path="res://models/weapons/big_iron.obj" id="1_ampqd"]
[ext_resource type="Texture2D" uid="uid://c23vayn4doala" path="res://textures/weapons/big_iron/big_iron_detail_mask.png" id="2_6oara"]
[ext_resource type="Script" path="res://scripts/weapons/weapon_base.gd" id="2_o12ys"]
[ext_resource type="Texture2D" uid="uid://ss8r0up4rgsx" path="res://textures/weapons/big_iron/big_iron_metallic.png" id="3_3nv2w"]
[ext_resource type="ArrayMesh" uid="uid://bblg4t73miejx" path="res://models/weapons/muzzle_flash_alt.obj" id="3_7l0wc"]
[ext_resource type="Texture2D" uid="uid://br5tgbkka8rp7" path="res://textures/weapons/big_iron/big_iron_roughness.png" id="4_g758g"]
[ext_resource type="Script" path="res://scripts/weapons/scope.gd" id="4_p5y4d"]
[ext_resource type="PackedScene" uid="uid://cehwd234g5us7" path="res://scenes/bullets/player/big_iron_bullet.tscn" id="6_lqm6f"]
[ext_resource type="Script" path="res://scripts/weapons/alert_area.gd" id="8_ibv0x"]
[ext_resource type="AudioStream" uid="uid://cs34y7mvho53h" path="res://audio/streams/weapons/firing/boomstick_fire.wav" id="9_i8lc1"]

[sub_resource type="Shader" id="Shader_wcwhh"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.1.1.stable.mono's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

global uniform float viewmodel_fov;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	
	float onetanfov = 1.0f / tan(0.5f * (viewmodel_fov * PI / 180.0f));
	float aspect = VIEWPORT_SIZE.x / VIEWPORT_SIZE.y;
	// modify projection matrix
	PROJECTION_MATRIX[1][1] = -onetanfov;
	PROJECTION_MATRIX[0][0] = onetanfov / aspect;
	
	// draws the viewmodel over everything (disable if you want dof near on viewmodel)
	POSITION = PROJECTION_MATRIX * MODELVIEW_MATRIX * vec4(VERTEX.xyz, 1.0);
	POSITION.z = mix(POSITION.z, 0, 0.99);
}


void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_lgy7d"]
render_priority = 0
shader = SubResource("Shader_wcwhh")
shader_parameter/albedo = Color(0.5, 0.5, 0.5, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.25
shader_parameter/metallic_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/specular = 0.5
shader_parameter/metallic = 1.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)

[sub_resource type="Shader" id="Shader_ojypt"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.1.1.stable.mono's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_nearest,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_nearest,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_nearest,repeat_enable;
uniform float specular;
uniform float metallic;
uniform float clearcoat : hint_range(0,1);
uniform float clearcoat_roughness : hint_range(0,1);
uniform sampler2D texture_clearcoat : hint_default_white,filter_nearest,repeat_enable;
uniform sampler2D texture_detail_albedo : source_color,filter_nearest,repeat_enable;
uniform sampler2D texture_detail_normal : hint_normal,filter_nearest,repeat_enable;
uniform sampler2D texture_detail_mask : hint_default_white,filter_nearest,repeat_enable;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

global uniform float viewmodel_fov;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;

	float onetanfov = 1.0f / tan(0.5f * (viewmodel_fov * PI / 180.0f));
	float aspect = VIEWPORT_SIZE.x / VIEWPORT_SIZE.y;
	// modify projection matrix
	PROJECTION_MATRIX[1][1] = -onetanfov;
	PROJECTION_MATRIX[0][0] = onetanfov / aspect;

	// draws the viewmodel over everything (disable if you want dof near on viewmodel)
	POSITION = PROJECTION_MATRIX * MODELVIEW_MATRIX * vec4(VERTEX.xyz, 1.0);
	POSITION.z = mix(POSITION.z, 0, 0.99);
}


void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	vec2 clearcoat_tex = texture(texture_clearcoat,base_uv).xy;
	CLEARCOAT = clearcoat*clearcoat_tex.x;	CLEARCOAT_ROUGHNESS = clearcoat_roughness*clearcoat_tex.y;
	vec4 detail_tex = texture(texture_detail_albedo,base_uv);
	vec4 detail_norm_tex = texture(texture_detail_normal,base_uv);
	vec4 detail_mask_tex = texture(texture_detail_mask,base_uv);
	vec3 detail = mix(ALBEDO.rgb,detail_tex.rgb,detail_tex.a);
	vec3 detail_norm = mix(NORMAL_MAP,detail_norm_tex.rgb,detail_tex.a);
	NORMAL_MAP = mix(NORMAL_MAP,detail_norm,detail_mask_tex.r);
	ALBEDO.rgb = mix(ALBEDO.rgb,detail,detail_mask_tex.r);
}
"

[sub_resource type="Gradient" id="Gradient_v5jf5"]
interpolation_mode = 1
offsets = PackedFloat32Array(0, 0.2, 0.5, 0.7)
colors = PackedColorArray(0.278431, 0.172549, 0.0470588, 1, 0.341176, 0.207843, 0.0784314, 1, 0.447059, 0.298039, 0.14902, 1, 0.415686, 0.313726, 0.145098, 1)

[sub_resource type="FastNoiseLite" id="FastNoiseLite_q3vr3"]
frequency = 0.1

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_p0187"]
width = 128
height = 32
generate_mipmaps = false
seamless_blend_skirt = 1.0
color_ramp = SubResource("Gradient_v5jf5")
noise = SubResource("FastNoiseLite_q3vr3")

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_1wj7s"]
width = 128
height = 32
generate_mipmaps = false
seamless_blend_skirt = 1.0
as_normal_map = true
bump_strength = 1.0
noise = SubResource("FastNoiseLite_q3vr3")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_laww8"]
render_priority = 0
shader = SubResource("Shader_ojypt")
shader_parameter/albedo = Color(0.501961, 0.501961, 0.501961, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/specular = 0.5
shader_parameter/metallic = 1.0
shader_parameter/clearcoat = 1.0
shader_parameter/clearcoat_roughness = 0.25
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/texture_metallic = ExtResource("3_3nv2w")
shader_parameter/texture_roughness = ExtResource("4_g758g")
shader_parameter/texture_clearcoat = ExtResource("2_6oara")
shader_parameter/texture_detail_albedo = SubResource("NoiseTexture2D_p0187")
shader_parameter/texture_detail_normal = SubResource("NoiseTexture2D_1wj7s")
shader_parameter/texture_detail_mask = ExtResource("2_6oara")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_a7mqv"]
render_priority = 0
shader = SubResource("Shader_wcwhh")
shader_parameter/albedo = Color(0.5, 0.5, 0.5, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.25
shader_parameter/metallic_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/specular = 0.5
shader_parameter/metallic = 1.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_flgpq"]
render_priority = 0
shader = SubResource("Shader_wcwhh")
shader_parameter/albedo = Color(0.5, 0.5, 0.5, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.25
shader_parameter/metallic_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/specular = 0.5
shader_parameter/metallic = 1.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)

[sub_resource type="Shader" id="Shader_yf35i"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.1.1.stable.mono's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx,unshaded;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

global uniform float viewmodel_fov;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	
	float onetanfov = 1.0f / tan(0.5f * (viewmodel_fov * PI / 180.0f));
	float aspect = VIEWPORT_SIZE.x / VIEWPORT_SIZE.y;
	// modify projection matrix
	PROJECTION_MATRIX[1][1] = -onetanfov;
	PROJECTION_MATRIX[0][0] = onetanfov / aspect;
	
	// draws the viewmodel over everything (disable if you want dof near on viewmodel)
	POSITION = PROJECTION_MATRIX * MODELVIEW_MATRIX * vec4(VERTEX.xyz, 1.0);
	POSITION.z = mix(POSITION.z, 0, 0.99);
}


void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_d2txc"]
render_priority = 0
shader = SubResource("Shader_yf35i")
shader_parameter/albedo = Color(1, 1, 0, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = null
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)

[sub_resource type="AnimationNodeAnimation" id="AnimationNodeAnimation_32yj2"]
animation = &"big_iron_deploy"

[sub_resource type="AnimationNodeAnimation" id="AnimationNodeAnimation_th2b6"]
animation = &"big_iron_fire"

[sub_resource type="AnimationNodeAnimation" id="AnimationNodeAnimation_3yhfp"]
animation = &"big_iron_idle"

[sub_resource type="AnimationNodeStateMachineTransition" id="AnimationNodeStateMachineTransition_g8bpy"]
switch_mode = 2
advance_mode = 2

[sub_resource type="AnimationNodeStateMachineTransition" id="AnimationNodeStateMachineTransition_xcnjc"]
switch_mode = 2
advance_mode = 2

[sub_resource type="AnimationNodeStateMachineTransition" id="AnimationNodeStateMachineTransition_owka3"]
advance_mode = 2

[sub_resource type="AnimationNodeStateMachine" id="AnimationNodeStateMachine_75ikx"]
states/deploy/node = SubResource("AnimationNodeAnimation_32yj2")
states/deploy/position = Vector2(382.815, 174)
states/firing/node = SubResource("AnimationNodeAnimation_th2b6")
states/firing/position = Vector2(545.333, 100.222)
states/idle/node = SubResource("AnimationNodeAnimation_3yhfp")
states/idle/position = Vector2(383.259, 100.667)
transitions = ["deploy", "idle", SubResource("AnimationNodeStateMachineTransition_g8bpy"), "firing", "idle", SubResource("AnimationNodeStateMachineTransition_xcnjc"), "Start", "deploy", SubResource("AnimationNodeStateMachineTransition_owka3")]
graph_offset = Vector2(-8, 39)

[sub_resource type="SphereShape3D" id="SphereShape3D_kip30"]
radius = 16.0

[sub_resource type="Animation" id="Animation_4yi83"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("AlertRadius:monitoring")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [false]
}

[sub_resource type="Animation" id="Animation_y0xky"]
resource_name = "big_iron_deploy"
step = 0.05
tracks/0/type = "position_3d"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("../BigIron")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/keys = PackedFloat32Array(0, 1, 0.35, -0.25, 0, 0.8, 1, 0.35, 0.25, 0, 1, 1, 0, 0, 0)
tracks/1/type = "rotation_3d"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("../BigIron")
tracks/1/interp = 2
tracks/1/loop_wrap = true
tracks/1/keys = PackedFloat32Array(0, 1, 1, 0, 0, 0, 0.15, 1, 0.707107, 0, 0, 0.707107, 0.3, 1, 0, 0, 0, 1, 0.45, 1, -0.707, 0, 0, 0.707, 0.6, 1, 1, 0, 0, 0, 0.8, 1, 0.707, 0, 0, 0.707, 0.95, 1, -0.087, 0, 0, 0.996, 1, 1, 0, 0, 0, 1)
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Spawner/MuzzleFlash:visible")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [false]
}

[sub_resource type="AudioStreamRandomizer" id="AudioStreamRandomizer_5orhs"]
streams_count = 1
random_pitch = 1.25
stream_0/stream = ExtResource("9_i8lc1")
stream_0/weight = 1.0

[sub_resource type="Animation" id="Animation_7x05r"]
resource_name = "big_iron_fire"
length = 1.1
step = 0.05
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("../BigIron/Spawner/MuzzleFlash:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [true, false]
}
tracks/1/type = "scale_3d"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("../BigIron/Spawner/MuzzleFlash")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = PackedFloat32Array(0, 1, 0, 0, 0, 0.05, 1, 3, 3, 3, 0.2, 1, 0, 0, 0)
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("../BigIron/Spawner/MuzzleFlash/OmniLight3D:light_energy")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0, 0.05, 0.2),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 0,
"values": [0.0, 1.0, 0.0]
}
tracks/3/type = "position_3d"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("../BigIron")
tracks/3/interp = 2
tracks/3/loop_wrap = true
tracks/3/keys = PackedFloat32Array(0, 1, 0, 0, 0, 0.05, 1, 0, 0, -0.25, 0.25, 1, 0, 0, 0, 0.4, 1, 0.25, 0, 0, 0.95, 1, 0.25, 0, 0, 1.1, 1, 0, 0, 0)
tracks/4/type = "rotation_3d"
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/path = NodePath("../BigIron")
tracks/4/interp = 2
tracks/4/loop_wrap = true
tracks/4/keys = PackedFloat32Array(0, 1, 0, 0, 0, 1, 0.05, 1, -0.131, 0, 0, 0.991, 0.25, 1, 0, 0, 0, 1, 0.4, 1, 0.707, 0, 0, 0.707, 0.55, 1, 1, 0, 0, 0, 0.7, 1, -0.707, 0, 0, 0.707, 0.85, 1, 0.131, 0, 0, 0.991, 1.1, 1, 0, 0, 0, 1)
tracks/5/type = "audio"
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/path = NodePath("../AudioStreamPlayer")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/keys = {
"clips": [{
"end_offset": 0.0,
"start_offset": 0.0,
"stream": SubResource("AudioStreamRandomizer_5orhs")
}],
"times": PackedFloat32Array(0)
}
tracks/5/use_blend = true
tracks/6/type = "value"
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/path = NodePath("AlertRadius:monitoring")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/keys = {
"times": PackedFloat32Array(0, 0.05),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [true, false]
}

[sub_resource type="Animation" id="Animation_3l6t5"]
resource_name = "big_iron_idle"
length = 2.0
loop_mode = 1
tracks/0/type = "position_3d"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("../BigIron")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/keys = PackedFloat32Array(0, 1, 0, 0, 0, 1, 1, 0, 0.01, 0, 2, 1, 0, 0, 0)
tracks/1/type = "rotation_3d"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("../BigIron")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = PackedFloat32Array(0, 1, 0, 0, 0, 1)

[sub_resource type="AnimationLibrary" id="AnimationLibrary_c7bdy"]
_data = {
"RESET": SubResource("Animation_4yi83"),
"big_iron_deploy": SubResource("Animation_y0xky"),
"big_iron_fire": SubResource("Animation_7x05r"),
"big_iron_idle": SubResource("Animation_3l6t5")
}

[node name="BigIron" type="Node3D"]
transform = Transform3D(-1, 0, -8.74228e-08, 0, 1, 0, 8.74228e-08, 0, -1, 0, -0.5, -0.35)

[node name="BigIron" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.00829176, 0)
layers = 4
cast_shadow = 0
mesh = ExtResource("1_ampqd")
surface_material_override/0 = SubResource("ShaderMaterial_lgy7d")
surface_material_override/1 = SubResource("ShaderMaterial_laww8")
surface_material_override/2 = SubResource("ShaderMaterial_a7mqv")
surface_material_override/3 = SubResource("ShaderMaterial_flgpq")
script = ExtResource("2_o12ys")
category = 3
bullet = ExtResource("6_lqm6f")
shot_cooldown = 1.25
ammo_type = "big_iron_bullets"
anti_clip_distance = 1.5

[node name="Spawner" type="Marker3D" parent="BigIron"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.0774074, 1.65)

[node name="MuzzleFlash" type="MeshInstance3D" parent="BigIron/Spawner"]
transform = Transform3D(-1, 0, -1.50996e-07, 0, 1, 0, 1.50996e-07, 0, -1, 4.23193e-06, -0.000249945, 0.000486732)
visible = false
layers = 4
material_override = SubResource("ShaderMaterial_d2txc")
cast_shadow = 0
mesh = ExtResource("3_7l0wc")

[node name="OmniLight3D" type="OmniLight3D" parent="BigIron/Spawner/MuzzleFlash"]
layers = 4
light_color = Color(1, 1, 0, 1)
light_energy = 0.0
shadow_enabled = true
omni_range = 10.0
omni_shadow_mode = 0

[node name="AnimationTree" type="AnimationTree" parent="BigIron"]
tree_root = SubResource("AnimationNodeStateMachine_75ikx")
anim_player = NodePath("../../AnimationPlayer")
active = true

[node name="Scope" type="Node3D" parent="BigIron"]
script = ExtResource("4_p5y4d")
scope_strength = 5.0

[node name="AlertRadius" type="Area3D" parent="BigIron"]
collision_layer = 2
collision_mask = 4
monitoring = false
script = ExtResource("8_ibv0x")

[node name="CollisionShape3D" type="CollisionShape3D" parent="BigIron/AlertRadius"]
shape = SubResource("SphereShape3D_kip30")

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
root_node = NodePath("../BigIron")
libraries = {
"": SubResource("AnimationLibrary_c7bdy")
}

[node name="AudioStreamPlayer" type="AudioStreamPlayer" parent="."]
bus = &"Weapons"
