[gd_scene load_steps=43 format=3 uid="uid://bimc4ufk5hicg"]

[ext_resource type="ArrayMesh" uid="uid://cgahp1theduxt" path="res://models/weapons/pump_shotgun.obj" id="1_ejui6"]
[ext_resource type="Texture2D" uid="uid://crih0rgk10al6" path="res://textures/weapons/pump_shotgun/shotgun_detail_mask.png" id="2_1omhy"]
[ext_resource type="Script" path="res://scripts/weapons/weapon_alt_fire.gd" id="2_rkwad"]
[ext_resource type="Texture2D" uid="uid://c2ubhgqhrxtiu" path="res://textures/weapons/pump_shotgun/shotgun_metallic.png" id="3_4s02n"]
[ext_resource type="ArrayMesh" uid="uid://crk83yrjbvbg6" path="res://models/weapons/muzzle_flash.obj" id="3_8b28n"]
[ext_resource type="Texture2D" uid="uid://blae7355fr3lo" path="res://textures/weapons/pump_shotgun/shotgun_roughness.png" id="4_vaanv"]
[ext_resource type="AnimationLibrary" uid="uid://byhlw1uu73dbf" path="res://scenes/weapons/shotgun_anims.res" id="5_eekxh"]
[ext_resource type="Texture2D" uid="uid://dbnasmfycrfat" path="res://textures/objects/shotgun_shell/shotgun_shell.png" id="8_xoaa3"]
[ext_resource type="Texture2D" uid="uid://cxhsqnpu78e2q" path="res://textures/objects/shotgun_shell/shotgun_shell_metallic.png" id="9_2ordl"]
[ext_resource type="Texture2D" uid="uid://dao3wvs485yhb" path="res://textures/objects/shotgun_shell/shotgun_shell_roughness.png" id="10_iuq6n"]
[ext_resource type="Script" path="res://scripts/weapons/alert_area.gd" id="11_gubn0"]

[sub_resource type="Shader" id="Shader_n22n6"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.1.1.stable.mono's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_nearest,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_nearest,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_nearest,repeat_enable;
uniform float specular;
uniform float metallic;
uniform float clearcoat : hint_range(0,1);
uniform float clearcoat_roughness : hint_range(0,1);
uniform sampler2D texture_clearcoat : hint_default_white,filter_nearest,repeat_enable;
uniform sampler2D texture_detail_albedo : source_color,filter_nearest,repeat_enable;
uniform sampler2D texture_detail_normal : hint_normal,filter_nearest,repeat_enable;
uniform sampler2D texture_detail_mask : hint_default_white,filter_nearest,repeat_enable;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

global uniform float viewmodel_fov;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	
	float onetanfov = 1.0f / tan(0.5f * (viewmodel_fov * PI / 180.0f));
	float aspect = VIEWPORT_SIZE.x / VIEWPORT_SIZE.y;
	// modify projection matrix
	PROJECTION_MATRIX[1][1] = -onetanfov;
	PROJECTION_MATRIX[0][0] = onetanfov / aspect;
	
	// draws the viewmodel over everything (disable if you want dof near on viewmodel)
	POSITION = PROJECTION_MATRIX * MODELVIEW_MATRIX * vec4(VERTEX.xyz, 1.0);
	POSITION.z = mix(POSITION.z, 0, 0.99);
}


void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	vec2 clearcoat_tex = texture(texture_clearcoat,base_uv).xy;
	CLEARCOAT = clearcoat*clearcoat_tex.x;	CLEARCOAT_ROUGHNESS = clearcoat_roughness*clearcoat_tex.y;
	vec4 detail_tex = texture(texture_detail_albedo,base_uv);
	vec4 detail_norm_tex = texture(texture_detail_normal,base_uv);
	vec4 detail_mask_tex = texture(texture_detail_mask,base_uv);
	vec3 detail = mix(ALBEDO.rgb,detail_tex.rgb,detail_tex.a);
	vec3 detail_norm = mix(NORMAL_MAP,detail_norm_tex.rgb,detail_tex.a);
	NORMAL_MAP = mix(NORMAL_MAP,detail_norm,detail_mask_tex.r);
	ALBEDO.rgb = mix(ALBEDO.rgb,detail,detail_mask_tex.r);
}
"

[sub_resource type="Gradient" id="Gradient_v5jf5"]
interpolation_mode = 1
offsets = PackedFloat32Array(0, 0.2, 0.5, 0.7)
colors = PackedColorArray(0.278431, 0.172549, 0.0470588, 1, 0.341176, 0.207843, 0.0784314, 1, 0.447059, 0.298039, 0.14902, 1, 0.415686, 0.313726, 0.145098, 1)

[sub_resource type="FastNoiseLite" id="FastNoiseLite_q3vr3"]
frequency = 0.1

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_fagd6"]
width = 48
height = 192
generate_mipmaps = false
seamless_blend_skirt = 1.0
color_ramp = SubResource("Gradient_v5jf5")
noise = SubResource("FastNoiseLite_q3vr3")

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_7duje"]
width = 48
height = 192
generate_mipmaps = false
seamless_blend_skirt = 1.0
as_normal_map = true
bump_strength = 1.0
noise = SubResource("FastNoiseLite_q3vr3")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_758ey"]
render_priority = 0
shader = SubResource("Shader_n22n6")
shader_parameter/albedo = Color(0.501961, 0.501961, 0.501961, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/specular = 0.5
shader_parameter/metallic = 1.0
shader_parameter/clearcoat = 1.0
shader_parameter/clearcoat_roughness = 0.25
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/texture_metallic = ExtResource("3_4s02n")
shader_parameter/texture_roughness = ExtResource("4_vaanv")
shader_parameter/texture_clearcoat = ExtResource("2_1omhy")
shader_parameter/texture_detail_albedo = SubResource("NoiseTexture2D_fagd6")
shader_parameter/texture_detail_normal = SubResource("NoiseTexture2D_7duje")
shader_parameter/texture_detail_mask = ExtResource("2_1omhy")

[sub_resource type="Shader" id="Shader_hcj4a"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.1.1.stable.mono's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_nearest,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_nearest,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_nearest,repeat_enable;
uniform float specular;
uniform float metallic;
uniform sampler2D texture_normal : hint_roughness_normal,filter_nearest,repeat_enable;
uniform float normal_scale : hint_range(-16,16);
uniform float clearcoat : hint_range(0,1);
uniform float clearcoat_roughness : hint_range(0,1);
uniform sampler2D texture_clearcoat : hint_default_white,filter_nearest,repeat_enable;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

global uniform float viewmodel_fov;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	
	float onetanfov = 1.0f / tan(0.5f * (viewmodel_fov * PI / 180.0f));
	float aspect = VIEWPORT_SIZE.x / VIEWPORT_SIZE.y;
	// modify projection matrix
	PROJECTION_MATRIX[1][1] = -onetanfov;
	PROJECTION_MATRIX[0][0] = onetanfov / aspect;
	
	// draws the viewmodel over everything (disable if you want dof near on viewmodel)
	POSITION = PROJECTION_MATRIX * MODELVIEW_MATRIX * vec4(VERTEX.xyz, 1.0);
	POSITION.z = mix(POSITION.z, 0, 0.99);
}

void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	NORMAL_MAP = texture(texture_normal,base_uv).rgb;
	NORMAL_MAP_DEPTH = normal_scale;
	vec2 clearcoat_tex = texture(texture_clearcoat,base_uv).xy;
	CLEARCOAT = clearcoat*clearcoat_tex.x;	CLEARCOAT_ROUGHNESS = clearcoat_roughness*clearcoat_tex.y;
}
"

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_ti8ho"]
width = 128
height = 128
generate_mipmaps = false
seamless_blend_skirt = 1.0
color_ramp = SubResource("Gradient_v5jf5")
noise = SubResource("FastNoiseLite_q3vr3")

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_ifyxs"]
width = 128
height = 128
generate_mipmaps = false
seamless_blend_skirt = 1.0
as_normal_map = true
bump_strength = 1.0
noise = SubResource("FastNoiseLite_q3vr3")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_eldlo"]
render_priority = 0
shader = SubResource("Shader_hcj4a")
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.75
shader_parameter/metallic_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/normal_scale = 1.0
shader_parameter/clearcoat = 1.0
shader_parameter/clearcoat_roughness = 0.25
shader_parameter/uv1_scale = Vector3(0.25, 1, 0.25)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/texture_albedo = SubResource("NoiseTexture2D_ti8ho")
shader_parameter/texture_normal = SubResource("NoiseTexture2D_ifyxs")

[sub_resource type="Shader" id="Shader_rno2n"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.1.1.stable.mono's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_nearest,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_nearest,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_nearest,repeat_enable;
uniform float specular;
uniform float metallic;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

global uniform float viewmodel_fov;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	
	float onetanfov = 1.0f / tan(0.5f * (viewmodel_fov * PI / 180.0f));
	float aspect = VIEWPORT_SIZE.x / VIEWPORT_SIZE.y;
	// modify projection matrix
	PROJECTION_MATRIX[1][1] = -onetanfov;
	PROJECTION_MATRIX[0][0] = onetanfov / aspect;
	
	// draws the viewmodel over everything (disable if you want dof near on viewmodel)
	POSITION = PROJECTION_MATRIX * MODELVIEW_MATRIX * vec4(VERTEX.xyz, 1.0);
	POSITION.z = mix(POSITION.z, 0, 0.99);
}






void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_xtwxk"]
render_priority = 0
shader = SubResource("Shader_rno2n")
shader_parameter/albedo = Color(0.501961, 0.501961, 0.501961, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.25
shader_parameter/metallic_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/specular = 0.5
shader_parameter/metallic = 1.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)

[sub_resource type="Shader" id="Shader_mcad4"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.1.1.stable.mono's StandardMaterial3D.

shader_type spatial;
render_mode blend_add,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx,unshaded;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

global uniform float viewmodel_fov;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	
	float onetanfov = 1.0f / tan(0.5f * (viewmodel_fov * PI / 180.0f));
	float aspect = VIEWPORT_SIZE.x / VIEWPORT_SIZE.y;
	// modify projection matrix
	PROJECTION_MATRIX[1][1] = -onetanfov;
	PROJECTION_MATRIX[0][0] = onetanfov / aspect;
	
	// draws the viewmodel over everything (disable if you want dof near on viewmodel)
	POSITION = PROJECTION_MATRIX * MODELVIEW_MATRIX * vec4(VERTEX.xyz, 1.0);
	POSITION.z = mix(POSITION.z, 0, 0.99);
}


void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_1yl5d"]
render_priority = 0
shader = SubResource("Shader_mcad4")
shader_parameter/albedo = Color(1, 1, 0, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = null
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_k2hkw"]
render_priority = 0
shader = SubResource("Shader_mcad4")
shader_parameter/albedo = Color(1, 1, 0, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = null
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_psgfd"]
direction = Vector3(-1, 0, 0)
spread = 30.0
flatness = 1.0
initial_velocity_min = 3.0
initial_velocity_max = 3.0
scale_min = 0.5
scale_max = 0.5

[sub_resource type="Shader" id="Shader_t2p06"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.1.1.stable.mono's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_nearest,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_nearest,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_nearest,repeat_enable;
uniform float specular;
uniform float metallic;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

global uniform float viewmodel_fov;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	
	float onetanfov = 1.0f / tan(0.5f * (viewmodel_fov * PI / 180.0f));
	float aspect = VIEWPORT_SIZE.x / VIEWPORT_SIZE.y;
	// modify projection matrix
	PROJECTION_MATRIX[1][1] = -onetanfov;
	PROJECTION_MATRIX[0][0] = onetanfov / aspect;
	
	// draws the viewmodel over everything (disable if you want dof near on viewmodel)
	POSITION = PROJECTION_MATRIX * MODELVIEW_MATRIX * vec4(VERTEX.xyz, 1.0);
	POSITION.z = mix(POSITION.z, 0, 0.99);
}


void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_p5qju"]
render_priority = 0
shader = SubResource("Shader_t2p06")
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/specular = 0.5
shader_parameter/metallic = 1.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/texture_albedo = ExtResource("8_xoaa3")
shader_parameter/texture_metallic = ExtResource("9_2ordl")
shader_parameter/texture_roughness = ExtResource("10_iuq6n")

[sub_resource type="CylinderMesh" id="CylinderMesh_ps8yr"]
material = SubResource("ShaderMaterial_p5qju")
top_radius = 0.05
bottom_radius = 0.05
height = 0.175
radial_segments = 6

[sub_resource type="AnimationNodeAnimation" id="AnimationNodeAnimation_gw5kj"]
animation = &"shotgun_anims/shotgun_alt_fire"

[sub_resource type="AnimationNodeAnimation" id="AnimationNodeAnimation_62y18"]
animation = &"shotgun_anims/shotgun_deploy"

[sub_resource type="AnimationNodeAnimation" id="AnimationNodeAnimation_74vc0"]
animation = &"shotgun_anims/shotgun_fire"

[sub_resource type="AnimationNodeAnimation" id="AnimationNodeAnimation_hph0p"]
animation = &"shotgun_anims/shotgun_idle"

[sub_resource type="AnimationNodeStateMachineTransition" id="AnimationNodeStateMachineTransition_b3vqj"]
advance_mode = 2

[sub_resource type="AnimationNodeStateMachineTransition" id="AnimationNodeStateMachineTransition_5ju1q"]
switch_mode = 2
advance_mode = 2

[sub_resource type="AnimationNodeStateMachineTransition" id="AnimationNodeStateMachineTransition_e8rcd"]
switch_mode = 2
advance_mode = 2

[sub_resource type="AnimationNodeStateMachineTransition" id="AnimationNodeStateMachineTransition_004om"]
switch_mode = 2
advance_mode = 2

[sub_resource type="AnimationNodeStateMachine" id="AnimationNodeStateMachine_pb0tv"]
states/alt_firing/node = SubResource("AnimationNodeAnimation_gw5kj")
states/alt_firing/position = Vector2(477.667, 11)
states/deploy/node = SubResource("AnimationNodeAnimation_62y18")
states/deploy/position = Vector2(393.667, 100.333)
states/firing/node = SubResource("AnimationNodeAnimation_74vc0")
states/firing/position = Vector2(477.667, 195)
states/idle/node = SubResource("AnimationNodeAnimation_hph0p")
states/idle/position = Vector2(565.667, 95.4445)
transitions = ["Start", "deploy", SubResource("AnimationNodeStateMachineTransition_b3vqj"), "deploy", "idle", SubResource("AnimationNodeStateMachineTransition_5ju1q"), "alt_firing", "idle", SubResource("AnimationNodeStateMachineTransition_e8rcd"), "firing", "idle", SubResource("AnimationNodeStateMachineTransition_004om")]
graph_offset = Vector2(-91, 17)

[sub_resource type="SphereShape3D" id="SphereShape3D_qjdy1"]
radius = 16.0

[sub_resource type="Animation" id="Animation_yqihf"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("PumpShotgun/AltSpawner/MuzzleFlash:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [false]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("PumpShotgun/Spawner/MuzzleFlash:visible")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [false]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(),
"transitions": PackedFloat32Array(),
"update": 0,
"values": []
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(),
"transitions": PackedFloat32Array(),
"update": 0,
"values": []
}
tracks/4/type = "value"
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/path = NodePath("PumpShotgun/AlertRadius:monitoring")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [false]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_vx23l"]
_data = {
"RESET": SubResource("Animation_yqihf")
}

[node name="Shotgun" type="Node3D"]
transform = Transform3D(-1, 0, -8.74228e-08, 0, 1, 0, 8.74228e-08, 0, -1, -0.15, -0.25, -0.35)

[node name="PumpShotgun" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.00625279, 0)
layers = 4
cast_shadow = 0
mesh = ExtResource("1_ejui6")
surface_material_override/0 = SubResource("ShaderMaterial_758ey")
surface_material_override/1 = SubResource("ShaderMaterial_eldlo")
surface_material_override/2 = SubResource("ShaderMaterial_xtwxk")
script = ExtResource("2_rkwad")
alt_bullet = "res://scenes/bullets/grenade.tscn"
alt_shot_cooldown = 1.25
alt_ammo_type = "grenades"
category = 1
bullet = "res://scenes/bullets/hitscan_bullet.tscn"
shot_cooldown = 0.85
volley = 9
spread = 5.0
ammo_type = "shells"
anti_clip_distance = 0.5

[node name="Spawner" type="Marker3D" parent="PumpShotgun"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -7.10543e-15, 0.135, 0.65)

[node name="MuzzleFlash" type="MeshInstance3D" parent="PumpShotgun/Spawner"]
transform = Transform3D(-1, 0, -1.50996e-07, 0, 1, 0, 1.50996e-07, 0, -1, 0, 0, 0.035)
visible = false
layers = 4
material_override = SubResource("ShaderMaterial_1yl5d")
cast_shadow = 0
mesh = ExtResource("3_8b28n")

[node name="OmniLight3D" type="OmniLight3D" parent="PumpShotgun/Spawner/MuzzleFlash"]
layers = 4
light_color = Color(1, 1, 0, 1)
light_energy = 0.0
shadow_enabled = true
omni_range = 10.0
omni_shadow_mode = 0

[node name="AltSpawner" type="Marker3D" parent="PumpShotgun"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0.65)

[node name="MuzzleFlash" type="MeshInstance3D" parent="PumpShotgun/AltSpawner"]
transform = Transform3D(-1, 0, -1.50996e-07, 0, 1, 0, 1.50996e-07, 0, -1, -8.71226e-10, 0, 0.0250344)
visible = false
layers = 4
material_override = SubResource("ShaderMaterial_k2hkw")
cast_shadow = 0
mesh = ExtResource("3_8b28n")
skeleton = NodePath("../../Spawner")

[node name="OmniLight3D" type="OmniLight3D" parent="PumpShotgun/AltSpawner/MuzzleFlash"]
layers = 4
light_color = Color(1, 1, 0, 1)
light_energy = 0.0
shadow_enabled = true
omni_range = 10.0
omni_shadow_mode = 0

[node name="ShellEject" type="GPUParticles3D" parent="PumpShotgun"]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0.125, 0)
layers = 4
emitting = false
amount = 5
one_shot = true
fixed_fps = 60
process_material = SubResource("ParticleProcessMaterial_psgfd")
draw_pass_1 = SubResource("CylinderMesh_ps8yr")

[node name="AnimationTree" type="AnimationTree" parent="PumpShotgun"]
tree_root = SubResource("AnimationNodeStateMachine_pb0tv")
anim_player = NodePath("../../AnimationPlayer")
active = true

[node name="AlertRadius" type="Area3D" parent="PumpShotgun"]
collision_layer = 2
collision_mask = 4
monitoring = false
script = ExtResource("11_gubn0")

[node name="CollisionShape3D" type="CollisionShape3D" parent="PumpShotgun/AlertRadius"]
shape = SubResource("SphereShape3D_qjdy1")

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
libraries = {
"": SubResource("AnimationLibrary_vx23l"),
"shotgun_anims": ExtResource("5_eekxh")
}

[node name="AudioStreamPlayer" type="AudioStreamPlayer" parent="."]
max_polyphony = 2
